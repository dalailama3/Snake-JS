{"version":3,"sources":["webpack/bootstrap 1efde1c9669b6858ef43","./js/main.js","./js/snake-view.js","./js/snake.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACLD;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAG;;AAEH;;AAEA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,oBAAmB,WAAW;AAC9B,sBAAqB,WAAW;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;;AC9HA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA,wEAAuE;AACvE;AACA;AACA;;AAEA;AACA;AACA;AACA,wEAAuE;AACvE;AACA;AACA;;AAEA;AACA;AACA;AACA,wEAAuE;AACvE;AACA;AACA;;AAEA;AACA;AACA;AACA,wEAAuE;AACvE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,I;AACA;;;;AAIA;AACA;AACA,UAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA,kBAAiB,gBAAgB;AACjC;AACA,oBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;;AAEA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1efde1c9669b6858ef43\n **/","var View = require('./snake-view');\n\n$(function () {\n  var containerEl = $('.snake');\n  new View(containerEl);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/main.js\n ** module id = 0\n ** module chunks = 0\n **/","var Board = require(\"./snake.js\");\n\nvar SnakeView = window.SnakeView = function SnakeView ($el) {\n  this.$el = $el;\n  this.board = new Board();\n\n  this.render();\n\n  var board = this.board;\n\n  $(window).on(\"keydown\", function (event) {\n    SnakeView.prototype.handleKeyEvent(event, board);\n  });\n\n  this.loadSnake = window.setInterval(this.step.bind(this), 100);\n\n};\n\n\n\nSnakeView.prototype.handleKeyEvent = function(event, board) {\n\n    var code = event.keyCode;\n    var dir, dir2;\n    switch (code) {\n      case 38:\n        dir = \"N\";\n        break;\n      case 40:\n        dir = \"S\";\n        break;\n      case 37:\n        dir = \"W\";\n        break;\n      case 39:\n        dir = \"E\";\n        break;\n      case 65:\n        dir2 = \"W\";\n        break;\n      case 87:\n        dir2 = \"N\";\n        break;\n      case 68:\n        dir2 = \"E\";\n        break;\n      case 83:\n        dir2 = \"S\";\n        break;\n    }\n\n    board.snake.turn(dir);\n    board.snakeTwo.turn(dir2);\n};\n\nSnakeView.prototype.step = function() {\n    this.board.snake.move();\n    this.board.snakeTwo.move();\n    this.board.eatApple();\n\n    if (this.board.snake.gameOver || this.board.snakeTwo.gameOver) {\n      clearInterval(this.loadSnake);\n      var gameOverDiv = $(\".game-over\");\n      gameOverDiv.removeClass(\"hide\");\n      $(\".game-over button\").on(\"click\", function (){\n        location.reload();\n      });\n      return;\n    }\n    this.render();\n};\n\nfunction arrayInArray(needle, haystack) {\n    var i=0, len = haystack.length, target = JSON.stringify(needle);\n    for(; i < len; i++) {\n        if (JSON.stringify(haystack[i]) == target) {\n            return 1;\n        }\n    }\n    return -1;\n};\n\nSnakeView.prototype.render = function() {\n  this.$el.empty();\n  var len = this.board.grid.length;\n  var segments = this.board.snake.segments;\n  var head = JSON.stringify(segments[0]);\n  var body = segments.slice(1,-1);\n  var tail = JSON.stringify(segments[segments.length-1]);\n  var apple = JSON.stringify(this.board.apple);\n\n  var segmentsTwo = this.board.snakeTwo.segments;\n  var headTwo = JSON.stringify(segmentsTwo[0]);\n  var bodyTwo = segmentsTwo.slice(1,-1);\n  var tailTwo = JSON.stringify(segmentsTwo[segmentsTwo.length-1]);\n\n\n  //search entire grid, if position is in segments array then add \"snake-segment\" class\n  //\n  var $ul = $(\"<ul>\");\n  $ul.addClass(\"group\");\n\n  for (var row = 0; row < len; row++) {\n    for (var col = 0; col < len; col++) {\n      var pos = [row, col];\n      var $li = $(\"<li>\");\n\n      if (JSON.stringify(pos) === head || JSON.stringify(pos) === headTwo) {\n        $li.addClass(\"snake-head\");\n      }\n      if (arrayInArray(pos, body.concat(bodyTwo)) === 1) {\n        $li.addClass(\"snake-body\");\n      }\n      if (JSON.stringify(pos) === tail || JSON.stringify(pos) === tailTwo) {\n        $li.addClass(\"snake-tail\");\n      }\n\n      if (JSON.stringify(pos) === apple) {\n        $li.addClass(\"apple\");\n\n      }\n      $ul.append($li);\n    }\n    this.$el.append($ul);\n  }\n};\n\n\nmodule.exports = SnakeView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/snake-view.js\n ** module id = 1\n ** module chunks = 0\n **/","\n\nvar Snake = function Snake(segments, direction) {\n  this.direction = direction;\n  this.segments = segments;\n  this.head = this.segments[0];\n  this.gameOver = false;\n\n};\n\nvar GRIDLENGTH = 25;\n\n\nvar moveNorth = function (pos) {\n  var newPos = [(pos[0] - 1), pos[1]];\n  return newPos;\n};\n\nvar moveSouth = function (pos) {\n  var newPos = [(pos[0] + 1), pos[1]];\n  return newPos;\n};\n\nvar moveEast = function (pos) {\n  var newPos = [pos[0], (pos[1] + 1)];\n  return newPos;\n};\n\nvar moveWest = function (pos) {\n  var newPos = [pos[0], (pos[1] - 1)];\n  return newPos;\n};\n\n\nvar outOfRange = function(pos) {\n  var x = pos[0];\n  var y = pos[1];\n\n  if ((x < 0 || x > GRIDLENGTH -1) || (y < 0 || y > GRIDLENGTH -1)) {\n    return true;\n  }\n};\n\n\nSnake.prototype.move = function () {\n\n\n  if (this.direction === \"N\") {\n    this.head = moveNorth(this.head);\n    var body = this.segments.slice(1);\n    if (outOfRange(this.head) || arrayInArray(this.head, body) === 1) {this.gameOver = true;}\n    this.segments.pop();\n    this.segments = [this.head].concat(this.segments);\n  }\n\n  if (this.direction === \"E\") {\n    this.head = moveEast(this.head);\n    var body = this.segments.slice(1);\n    if (outOfRange(this.head) || arrayInArray(this.head, body) === 1) {this.gameOver = true;}\n    this.segments.pop();\n    this.segments = [this.head].concat(this.segments);\n  }\n\n  if (this.direction === \"S\") {\n    this.head = moveSouth(this.head);\n    var body = this.segments.slice(1);\n    if (outOfRange(this.head) || arrayInArray(this.head, body) === 1) {this.gameOver = true;}\n    this.segments.pop();\n    this.segments = [this.head].concat(this.segments);\n  }\n\n  if (this.direction === \"W\") {\n    this.head = moveWest(this.head);\n    var body = this.segments.slice(1);\n    if (outOfRange(this.head) || arrayInArray(this.head, body) === 1) {this.gameOver = true;}\n    this.segments.pop();\n    this.segments = [this.head].concat(this.segments);\n  }\n};\n\nvar oppositeDir = function(dir1, dir2) {\n  if (dir1 === \"N\" && dir2 === \"S\") {\n    return true;\n  }\n  else if (dir1 === \"S\" && dir2 === \"N\") {\n    return true;\n  }\n  else if (dir1 === \"E\" && dir2 === \"W\") {\n    return true;\n  }\n  else if (dir1 === \"W\" && dir2 === \"E\") {\n    return true;\n  }\n  else {\n    return false;\n  }\n\n};\n\n// only change direction if not opposite of current direction\nSnake.prototype.turn = function (newDir) {\n\n  if (newDir === undefined) {\n    this.direction = this.direction;\n  }\n  else if (!oppositeDir(this.direction, newDir)) {\n    this.direction = newDir;\n  } \n};\n\n\n\nfunction arrayInArray(needle, haystack) {\n    var i=0, len = haystack.length, target = JSON.stringify(needle);\n    for(; i < len; i++) {\n        if (JSON.stringify(haystack[i]) == target) {\n            return 1;\n        }\n    }\n    return -1;\n};\n\nvar Board = function Board () {\n  this.grid = this.makeGrid();\n  this.snake = new Snake([[0,0], [0,1], [0,2], [0,3], [0,4]], \"S\");\n  this.snakeTwo = new Snake([[15,4], [15,3], [15,2], [15,1], [15,0]], \"E\");\n  this.apple = this.randomApple();\n};\n\nBoard.prototype.randomApple = function () {\n  var x = Math.floor(Math.random() * GRIDLENGTH);\n  var y = Math.floor(Math.random() * GRIDLENGTH);\n  var pos = [x, y];\n\n  while (arrayInArray(pos, this.snake.segments) === 1) {\n    x = Math.floor(Math.random() * GRIDLENGTH);\n    y = Math.floor(Math.random() * GRIDLENGTH);\n    pos = [x, y];\n  }\n  return pos;\n};\n\n//add segment to position in opposite direction of snake's current direction\n//if illegal than move clockwise until legal\nvar addSegment = function(direction, tailEnd) {\n  var result;\n  switch (direction) {\n    case \"N\":\n      if (!outOfRange(moveSouth(tailEnd))) {\n        result = moveSouth(tailEnd);\n      } else {\n        result = moveEast(tailEnd);\n      }\n      break;\n    case \"S\":\n      if (!outOfRange(moveNorth(tailEnd))) {\n        result = moveNorth(tailEnd);\n      } else {\n        result = moveWest(tailEnd);\n      }\n    case \"E\":\n      if (!outOfRange(moveWest(tailEnd))) {\n        result = moveWest(tailEnd);\n      } else {\n        result = moveNorth(tailEnd);\n      }\n    case \"W\":\n      if (!outOfRange(moveEast(tailEnd))) {\n        result = moveEast(tailEnd);\n      } else {\n        result = moveSouth(tailEnd);\n      }\n  }\n  return result;\n\n};\n\nBoard.prototype.eatApple = function () {\n  var head = JSON.stringify(this.snake.head);\n  var apple = JSON.stringify(this.apple);\n  var segments = this.snake.segments;\n  var tail = segments[segments.length-1];\n\n  var headTwo = JSON.stringify(this.snakeTwo.head);\n  var segmentsTwo = this.snakeTwo.segments;\n  var tailTwo = segmentsTwo[segmentsTwo.length-1];\n\n  if (head === apple || headTwo === apple) {\n    this.apple = this.randomApple();\n\n    var newSegment = addSegment(this.snake.direction, tail);\n    this.snake.segments.push(newSegment);\n\n    var newSegmentTwo = addSegment(this.snakeTwo.direction, tailTwo);\n    this.snakeTwo.segments.push(newSegmentTwo);\n  }\n};\n\n\nBoard.prototype.makeGrid = function() {\n  var grid = [];\n\n  for (var i = 0; i < GRIDLENGTH; i++) {\n    grid.push([]);\n    for (var j = 0; j < GRIDLENGTH; j++) {\n      grid[i].push(null);\n    }\n  }\n  return grid;\n\n};\n\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/snake.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}