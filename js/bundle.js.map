{"version":3,"sources":["webpack/bootstrap 620901b9ecf15d1d4f7c","./js/main.js","./js/snake-view.js","./js/snake.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACLD;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAG;;AAEH;;;AAGA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,UAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAmB,WAAW;AAC9B,sBAAqB,WAAW;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB,cAAc;AACvC,4BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;;ACzHA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA,iCAAgC;AAChC;AACA;AACA;;AAEA;AACA;AACA,iCAAgC;AAChC;AACA;AACA;;AAEA;AACA;AACA,iCAAgC;AAChC;AACA;AACA;;AAEA;AACA;AACA,iCAAgC;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,IAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA,kBAAiB,gBAAgB;AACjC;AACA,oBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB,sBAAsB;AAC5C,yBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 620901b9ecf15d1d4f7c\n **/","var View = require('./snake-view');\n\n$(function () {\n  var containerEl = $('.snake');\n  new View(containerEl);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/main.js\n ** module id = 0\n ** module chunks = 0\n **/","var Board = require(\"./snake.js\");\n\nvar SnakeView = window.SnakeView = function SnakeView ($el) {\n  this.$el = $el;\n  this.board = new Board();\n\n  this.render();\n\n  var board = this.board;\n\n  $(window).on(\"keydown\", function (event) {\n    SnakeView.prototype.handleKeyEvent(event, board);\n  });\n\n  this.loadSnake = window.setInterval(this.step.bind(this), 100);\n\n\n};\n\n\n\nSnakeView.prototype.handleKeyEvent = function(event, board) {\n\n    var code = event.keyCode;\n    var dir;\n    switch (code) {\n      case 38:\n        dir = \"N\";\n        break;\n      case 40:\n        dir = \"S\";\n        break;\n      case 37:\n        dir = \"W\";\n        break;\n      case 39:\n        dir = \"E\";\n        break;\n    }\n\n    board.snake.turn(dir);\n};\n\nSnakeView.prototype.step = function() {\n    this.board.snake.move();\n\n    if (this.board.snake.gameOver) {\n      clearInterval(this.loadSnake);\n      var div = $(\"<div>\");\n      div.addClass(\"game-over\");\n      this.$el.parent().append(div);\n      $(\"div.game-over\").on(\"click\", function (){\n        location.reload();\n      });\n      return;\n\n\n    }\n    this.render();\n};\n\nfunction arrayInArray(needle, haystack) {\n    var i=0, len = haystack.length, target = JSON.stringify(needle);\n    for(; i < len; i++) {\n        if (JSON.stringify(haystack[i]) == target) {\n            return 1;\n        }\n    }\n    return -1;\n};\n\nSnakeView.prototype.render = function() {\n  this.$el.empty();\n  var len = this.board.grid.length;\n  var newGrid = this.board.grid;\n  var segments = this.board.snake.segments;\n\n  //search entire grid, if position is in segments array then add \"snake-segment\" class\n  //\n  var $ul = $(\"<ul>\");\n  $ul.addClass(\"group\");\n\n  for (var row = 0; row < len; row++) {\n    for (var col = 0; col < len; col++) {\n      var pos = [row, col];\n      var $li = $(\"<li>\");\n\n      if (arrayInArray(pos, segments) === 1) {\n        $li.addClass(\"snake-segment\");\n      }\n      $ul.append($li);\n    }\n    this.$el.append($ul);\n  }\n};\n\n\n\n\n\n// SnakeView.prototype.render = function() {\n//   this.$el.empty();\n//   var len = this.board.grid.length;\n//   var $ul = $(\"<ul>\");\n//   $ul.addClass(\"group\");\n//\n//   var renderGrid = this.board.renderSnake();\n//\n//\n//   for (var rowIdx = 0; rowIdx < len; rowIdx++) {\n//     for (var colIdx = 0; colIdx < len; colIdx++) {\n//       var $li = $(\"<li>\");\n//       if (renderGrid[rowIdx][colIdx] === \"x\") {\n//         $li.addClass(\"snake-segment\");\n//       }\n//       $ul.append($li);\n//     }\n//   }\n//   this.$el.append($ul);\n//\n// }\n\n\nmodule.exports = SnakeView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/snake-view.js\n ** module id = 1\n ** module chunks = 0\n **/","\n\nvar Snake = function Snake() {\n  this.direction = \"S\";\n  this.segments = [[0,0], [0,1], [0,2], [0,3], [0,4]];\n  this.head = this.segments[0];\n  this.gameOver = false;\n\n};\n\nvar GRIDLENGTH = 20;\n\n\n\n\n\nvar moveNorth = function (pos) {\n  var newPos = [(pos[0] - 1), pos[1]];\n  return newPos;\n};\n\nvar moveSouth = function (pos) {\n  var newPos = [(pos[0] + 1), pos[1]];\n  return newPos;\n};\n\nvar moveEast = function (pos) {\n  var newPos = [pos[0], (pos[1] + 1)];\n  return newPos;\n};\n\nvar moveWest = function (pos) {\n  var newPos = [pos[0], (pos[1] - 1)];\n  return newPos;\n};\n\n\nvar outOfRange = function(pos) {\n  var x = pos[0];\n  var y = pos[1];\n\n  if ((x < 0 || x > GRIDLENGTH -1) || (y < 0 || y > GRIDLENGTH -1)) {\n    return true;\n  }\n};\n\nSnake.prototype.move = function () {\n\n\n  if (this.direction === \"N\") {\n    this.head = moveNorth(this.head);\n    if (outOfRange(this.head)) {this.gameOver = true;}\n    this.segments.pop();\n    this.segments = [this.head].concat(this.segments);\n  }\n\n  if (this.direction === \"E\") {\n    this.head = moveEast(this.head);\n    if (outOfRange(this.head)) {this.gameOver = true;}\n    this.segments.pop();\n    this.segments = [this.head].concat(this.segments);\n  }\n\n  if (this.direction === \"S\") {\n    this.head = moveSouth(this.head);\n    if (outOfRange(this.head)) {this.gameOver = true;}\n    this.segments.pop();\n    this.segments = [this.head].concat(this.segments);\n  }\n\n  if (this.direction === \"W\") {\n    this.head = moveWest(this.head);\n    if (outOfRange(this.head)) {this.gameOver = true;}\n    this.segments.pop();\n    this.segments = [this.head].concat(this.segments);\n  }\n};\n\nvar oppositeDir = function(dir1, dir2) {\n  if (dir1 === \"N\" && dir2 === \"S\") {\n    return true;\n  }\n  else if (dir1 === \"S\" && dir2 === \"N\") {\n    return true;\n  }\n  else if (dir1 === \"E\" && dir2 === \"W\") {\n    return true;\n  }\n  else if (dir1 === \"W\" && dir2 === \"E\") {\n    return true;\n  }\n  else {\n    return false;\n  }\n\n};\n\n// only change direction if not opposite of current direction\nSnake.prototype.turn = function (newDir) {\n\n  if (oppositeDir(this.direction, newDir)) {\n    this.direction = this.direction;\n  } else {\n    this.direction = newDir;\n  }\n\n};\n\nvar Board = function Board () {\n  this.grid = this.makeGrid();\n  this.snake = new Snake();\n  // this.renderSnake();\n};\n\n\nBoard.prototype.makeGrid = function() {\n  var grid = [];\n\n  for (var i = 0; i < GRIDLENGTH; i++) {\n    grid.push([]);\n    for (var j = 0; j < GRIDLENGTH; j++) {\n      grid[i].push(null);\n    }\n  }\n  return grid;\n\n};\n\n// function arrayInArray(needle, haystack) {\n//     var i=0, len = haystack.length, target = JSON.stringify(needle);\n//     for(; i < len; i++) {\n//         if (JSON.stringify(haystack[i]) == target) {\n//             return 1;\n//         }\n//     }\n//     return -1;\n// };\n//\n// Board.prototype.renderSnake = function() {\n//   var newGrid = this.grid;\n//   var segments = this.snake.segments;\n//\n//   //search entire grid, if position is in segments array then render it as \"x\"\n//   //\n//   for (var row = 0; row < newGrid.length; row++) {\n//     for (var col = 0; col < newGrid.length; col++) {\n//       var pos = [row, col];\n//\n//       if (arrayInArray(pos, segments) === 1) {\n//         newGrid[row][col] = \"x\";\n//\n//       } else {\n//         newGrid[row][col] = null;\n//       }\n//     }\n//   }\n//   return newGrid;\n//\n// };\n\n\n\n\n\n\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/snake.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}